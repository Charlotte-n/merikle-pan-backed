# 面试项目

## 新闻管理系统

### 后端express + mysql

#### 连接数据库 + 使用数据库

1. 使用express来连接(mongodb/mysql)数据库
   1. 安装mysql包
   2. 创建数据池，来连接本地数据库（有着基本的host、user、password、database、charset）
   3. 导出这个数据库连接池

2. 通过创建routes目录来写web和admin的路由
3. router-handler来处理路由函数，一些数据库的操作

### 后端express + mongodb



## 新闻全栈项目亮点

### 登录

#### 后端

1. 生成token，校验token和设置有效时间，我使用的是jsonwebtoken，然后我封装了一个生成的token，设置token有效时间，校验token的工具文件
2. 拿到用户传来的数据，数据库查询是否有该用户的用户名和密码，有就生成token，将token通过设置响应头方式(Authorization)返回给客户端,用户登陆成功后设置的响应头和返回用户的一些信息

#### 前端

1. 登录之后会拿到token，因为有的接口需要身份认证，所以前端每次调用接口的时候都要携带token来进行身份验证，在axios的相应拦截里面获取token，在请求拦截里面设置token，加上"Bearer ${token} "
2. 登录之后，九江用户的信息存储下来，也就是持久化，本次项目使用的是Vuex（个人感觉和react中的redux感觉使用起来差不多），然后使用的插件为`vuex-persistedstate`
3. 退出登陆的清空用户信息

### 用户权限设置

本项目是还有用户权限的，例如管理员具有增加用户，删除用户的权限

而普通用户并没有这个权限

本项目实现用户权限管理主要是通过动态添加路由的方式来实现的

1. 在路由表中，给那些需要添加权限的路由加上标识
2.  进行判断是否有该标识，没有的话就放行，有的话就判断是否为管理员，是管理员就放行，不是就不放行
   ​ 但是这样做会有一个bug，如果退出的话不刷新，再仓库储存的store.state.isGetterRouter已经为true了所以第二次是不会走配置了ConfigRouter（），第一次配置是什么就是什么了，除非重新刷新
   ​解决办法就是当用户再进来的时候，再进行配置一变路由，所以需要在登录的时候，就把store.state.isGetterRouter改为false
   ​  但还是有一个bug，因为添加上去了路由，但是这是个累加的过程，前面有了这个路由，后面又重新加上了这个路由，所以再每次添加路由的时候要删除以前的路由

### 接口的增删改查操作

普通的对数据库的增删改查

### 上传文件

#### 前端

1. 封装了一个工具函数来处理文件上传，传入api和数据传入，会生成form-data形式，还设置请求头，调用这个api并返回信息的一个工具函数

```js
export const upload = async (api,ruleForm)=>{
    const param = new FormData();
    for (let i in ruleForm) {
        //传入key和value
        param.append(i, ruleForm[i]);
    }
    //将这个数据传递给后端进行ajax请求
    const headers = {
        'Content Type': "multipart/form-data"
    }
    return await api(param,headers);
}
```

2. 封装了一个图片上传的组件:接收外来传入的图片地址，然后一传入图片就将文件传入到回调函数中,进行回调:

```js
//处理文件上传
const handleChange = (file) => {
  //value.raw是上传的文件的信息，所以是创建url对象
  ruleForm.avatar = URL.createObjectURL(file.raw);
  //并且保存一份原始的文件,因为最后上传给后端的话，是需要拿到数据的
  ruleForm.file = file.raw
}
```

#### 后端

1. 处理图片上传

安装multer包，然后还有图片上传到哪个文件夹里面

```js
const multer  = require('multer')
const upload = multer({ dest: 'public/newsuploads/' })
NewsRouter.post("/adminapi/news/updateNews",upload.single("file"),NewsController.updateList)

```

2. 后端上传文件的接口，获取它的token，得到id数据库查询更新数据就可以了

## 预约挂号平台

### 项目亮点

#### 搜索筛选功能

##### 筛选功能

点击按钮的时候会筛选出相应的数据，点击重新获取数据

其中实现了一些父子之间的通信

##### 搜索功能

因为这个使用的是Element-plus-ui的搜索框，所以其中的节流不用我们再考虑了。直接用户填写内容（关键词），根据element-plus-ui中的规定的api来传入信息，然后整理为回调函数所需要的数据格式。然后选择其中的一项信息，就会跳转到相应的医院界面。

##### 支付功能

点击支付，调用支付接口获取二维码信息，得到了二维码字符串，通过一个插件Qrcode将字符串转化为二维码。

何时知道用户是否支付成功，需要调用接口查询订单的支付状态。

需要每隔几秒就询问服务器是否支付成功，进行后续的操作，记着使用定时器要把定时器清除。

##### 第三方登录

![img](https://cdn.nlark.com/yuque/0/2023/png/35603205/1690767612131-1c11d18c-1032-49a5-9ae5-d6b57116777f.png)

后端通过去注册相关微信开放平台，然后获得APPID和钥匙，还有回调、的信息。

第一步

请求code（看是否授权）：第三方使用网站应用授权登录前请注意以获取网页授权作用域，可以在网页端打开链接（得到一个二维码页面）。授权重定向到url，没授权就不重定向。

前端

1. 引入微信提供生成二维码的核心插件

2. 生成二维码的代码
3. 微信每隔一段时间就看是否授权 
4. 最后服务器获取到了用户的信息，重定向到前端某一个也米娜，通过query参数将用户信息驻给前端。

#### 对病人相关亲属进行管理，进行基本的增删改查

# 孟屿音乐



# 浏览器内核

> 浏览器内核是浏览器的核心组件，负责解析HTML、CSS和JavaScript等网页标准语言，然后将其渲染成用户可视化的网页。

目前主流浏览器内核有WebKit（Blink）、Gecko、Trident（已废弃，用于旧版IE浏览器）和EdgeHTML（已废弃，用于旧版Edge浏览器）。

 Blink是WebKit的一个分支，由Google在2013年从WebKit中派生而来。Blink继承了WebKit的大部分特性，并在此基础上进行了优化和改进。

## 浏览器内核中渲染引擎是什么

渲染引擎是浏览器内核的核心组件，负责将内容渲染到用户屏幕上。在WebKit(Blink)中，渲染引擎通常被称为WebKit内核。

# canvs和svg和Echarts

![image-20231211150157599](C:\Users\mm\AppData\Roaming\Typora\typora-user-images\image-20231211150157599.png)



Echarts为一个js的数据可视化的库

# 构建工具

当使用模块化规范时。在浏览器有两个问题1。浏览器兼容问题  2.模块过多的加载问题

这样就需要一个工具，将多个模块打包成一个文件，解决这些问题。

```bash
mongod --path=/data/db
```



